'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.isSuccessfulResponse = isSuccessfulResponse;
exports.isValidParameter = isValidParameter;

var _wdioLogger = require('wdio-logger');

var _wdioLogger2 = _interopRequireDefault(_wdioLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _wdioLogger2.default)('webdriver');

/**
 * check if WebDriver requests was successful
 * @param  {Object}  body  body payload of response
 * @return {Boolean}       true if request was successful
 */
function isSuccessfulResponse() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        body = _ref.body,
        statusCode = _ref.statusCode;

    /**
     * response contains a body
     */
    if (!body) {
        log.debug('request failed due to missing body');
        return false;
    }

    /**
     * if it has a status property, it should be 0
     * (just here to stay backwards compatible to the jsonwire protocol)
     */
    if (body.status && body.status !== 0) {
        log.debug(`request failed due to status ${body.status}`);
        return false;
    }

    /**
     * the body contains an actual result
     */
    if (typeof body.value === 'undefined') {
        log.debug('request failed due to missing value in body');
        return false;
    }

    var hasErrorResponse = body.value && (body.value.error || body.value.stackTrace || body.value.stacktrace);

    /**
     * check status code
     */
    if (statusCode === 200 && !hasErrorResponse) {
        return true;
    }

    /**
     * that has no error property (Appium only)
     */
    if (hasErrorResponse) {
        log.debug('request failed due to response error:', body.value.error);
        return false;
    }

    return true;
}

/**
 * checks if command argument is valid according to specificiation
 *
 * @param  {*}       arg           command argument
 * @param  {Object}  commandParam  corresponding parameter description
 * @return {Boolean}               true if argument is valid
 */
function isValidParameter(arg, commandParam) {
    var shouldBeArray = false;
    var expectedType = commandParam.type;

    if (expectedType.slice(-2) === '[]') {
        expectedType = expectedType.slice(0, -2);
        shouldBeArray = true;
    }

    /**
     * check type of each individual array element
     */
    if (shouldBeArray) {
        if (!Array.isArray(arg)) {
            return false;
        }
    } else {
        /**
         * transform to array to have a unified check
         */
        arg = [arg];
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (0, _getIterator3.default)(arg), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var argEntity = _step.value;

            if (!(typeof argEntity).match(expectedType)) {
                return false;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return true;
}