'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.default = function (method, endpoint, commandInfo) {
    var command = commandInfo.command,
        ref = commandInfo.ref,
        parameters = commandInfo.parameters,
        _commandInfo$variable = commandInfo.variables,
        variables = _commandInfo$variable === undefined ? [] : _commandInfo$variable;


    return function () {
        var commandParams = [].concat((0, _toConsumableArray3.default)(variables.map(function (v) {
            return (0, _assign2.default)(v, {
                /**
                 * url variables are:
                 */
                required: true, // always required as they are part of the endpoint
                type: 'string' // have to be always type of string
            });
        })), (0, _toConsumableArray3.default)(parameters));

        var commandUsage = `${command}(${commandParams.map(function (p) {
            return p.name;
        }).join(', ')})`;
        var moreInfo = `\n\nFor more info see ${ref}\n`;
        var body = {};

        /**
         * parameter check
         */

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        if (args.length !== commandParams.length) {
            var parameterDescription = commandParams.length ? `\n\nProperty Description:\n${commandParams.map(function (p) {
                return `  "${p.name}" (${p.type}): ${p.description}`;
            }).join('\n')}` : '';

            throw new Error(`Wrong parameters applied for ${command}\n` + `Usage: ${commandUsage}` + parameterDescription + moreInfo);
        }

        /**
         * parameter type check
         */
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = (0, _getIterator3.default)((0, _entries2.default)(args)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _ref = _step.value;

                var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                var i = _ref2[0];
                var arg = _ref2[1];

                var commandParam = commandParams[i];

                if (!(0, _utils.isValidParameter)(arg, commandParam)) {
                    throw new Error(`Malformed type for "${commandParam.name}" parameter of command ${command}\n` + `Expected: ${commandParam.type}\n` + `Actual: ${typeof arg}` + moreInfo);
                }

                /**
                 * inject url variables
                 */
                if (i < variables.length) {
                    endpoint = endpoint.replace(`:${commandParams[i].name}`, arg);
                    continue;
                }

                /**
                 * rest of args are part of body payload
                 */
                body[commandParams[i].name] = arg;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var request = new _request2.default(method, endpoint, body);
        return request.makeRequest(this.options, this.sessionId).then(function (result) {
            if (result.value) {
                log.info('RESULT', result.value);
            }

            return result.value;
        });
    };
};

var _wdioLogger = require('wdio-logger');

var _wdioLogger2 = _interopRequireDefault(_wdioLogger);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _wdioLogger2.default)('webdriver');

module.exports = exports['default'];