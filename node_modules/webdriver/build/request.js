'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _request2 = require('request');

var _request3 = _interopRequireDefault(_request2);

var _wdioLogger = require('wdio-logger');

var _wdioLogger2 = _interopRequireDefault(_wdioLogger);

var _utils = require('./utils');

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _wdioLogger2.default)('webdriver');
var agents = {
    http: new _http2.default.Agent({ keepAlive: true }),
    https: new _https2.default.Agent({ keepAlive: true })
};

var WebDriverRequest = function () {
    function WebDriverRequest(method, endpoint, body) {
        (0, _classCallCheck3.default)(this, WebDriverRequest);

        this.method = method;
        this.endpoint = endpoint;
        this.defaultOptions = {
            method,
            body,
            followAllRedirects: true,
            json: true,
            headers: {
                'Connection': 'keep-alive',
                'Accept': 'application/json',
                'User-Agent': 'webdriver/' + _package2.default.version
            }
        };
    }

    (0, _createClass3.default)(WebDriverRequest, [{
        key: 'makeRequest',
        value: function makeRequest(options, sessionId) {
            var fullRequestOptions = (0, _assign2.default)(this.defaultOptions, this._createOptions(options, sessionId));
            return this._request(fullRequestOptions, options.connectionRetryCount);
        }
    }, {
        key: '_createOptions',
        value: function _createOptions(options, sessionId) {
            var requestOptions = {
                agent: agents[options.protocol]

                /**
                 * if we don't have a session id we set it here, unless we call commands that don't require session ids, for
                 * example /sessions. The call to /sessions is not connected to a session itself and it therefore doesn't
                 * require it
                 */
            };if (this.endpoint.match(/:sessionId/) && !sessionId) {
                throw new Error('A sessionId is required for this command');
            }

            requestOptions.uri = _url2.default.parse(`${options.protocol}://` + `${options.hostname}:${options.port}` + _path2.default.resolve(`${options.path}${this.endpoint.replace(':sessionId', sessionId)}`));

            /**
             * Check for custom authorization header
             */
            if (typeof options.headers === 'object') {
                requestOptions.headers = (0, _assign2.default)(requestOptions.headers, options.headers);
            }

            /**
             * Add query parameters to request options if it is an object
             */
            if (typeof this.defaultOptions.queryParams === 'object') {
                requestOptions.qs = options.queryParams;
            }

            /**
             * send authentication credentials only when creating new session
             */
            if (this.endpoint === '/session' && options.auth) {
                requestOptions.auth = this.auth;
            }

            return requestOptions;
        }
    }, {
        key: '_request',
        value: function _request(fullRequestOptions) {
            var _this = this;

            var totalRetryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var retryCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            log.debug(`REQUEST ${fullRequestOptions.uri.href}`);

            if (fullRequestOptions.body && (0, _keys2.default)(fullRequestOptions.body).length) {
                log.debug('DATA', fullRequestOptions.body);
            }

            return new _promise2.default(function (resolve, reject) {

                (0, _request3.default)(fullRequestOptions, function (err, response, body) {
                    /**
                     * Resolve only if successful response
                     */
                    if (!err && (0, _utils.isSuccessfulResponse)(response)) {
                        return resolve(body);
                    }

                    if (retryCount >= totalRetryCount) {
                        // ToDo make proper request error
                        return reject(new Error(err || body.value.error));
                    }

                    _this._request(fullRequestOptions, totalRetryCount, ++retryCount).then(resolve).catch(reject);
                });
            });
        }
    }]);
    return WebDriverRequest;
}();

exports.default = WebDriverRequest;
module.exports = exports['default'];