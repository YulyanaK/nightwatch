'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _wdioConfig = require('wdio-config');

var _wdioConfig2 = _interopRequireDefault(_wdioConfig);

var _wdioLogger = require('wdio-logger');

var _wdioLogger2 = _interopRequireDefault(_wdioLogger);

var _monad = require('./monad');

var _monad2 = _interopRequireDefault(_monad);

var _command = require('./command');

var _command2 = _interopRequireDefault(_command);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

var _constants = require('./constants');

var _webdriver = require('../protocol/webdriver.json');

var _webdriver2 = _interopRequireDefault(_webdriver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WebDriver = function () {
    function WebDriver() {
        (0, _classCallCheck3.default)(this, WebDriver);
    }

    (0, _createClass3.default)(WebDriver, null, [{
        key: 'newSession',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var modifier = arguments[1];

                var params, sessionRequest, _ref2, _ref2$value, sessionId, capabilities, monad, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref3, _ref4, endpoint, methods, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _ref5, _ref6, method, commandData, prototype;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                params = (0, _wdioConfig2.default)(_constants.DEFAULTS, options);

                                _wdioLogger2.default.setLevel('webdriver', params.logLevel);

                                sessionRequest = new _request2.default('POST', '/session', { capabilities: params.capabilities });
                                _context.next = 5;
                                return sessionRequest.makeRequest(params);

                            case 5:
                                _ref2 = _context.sent;
                                _ref2$value = _ref2.value;
                                sessionId = _ref2$value.sessionId;
                                capabilities = _ref2$value.capabilities;

                                options.capabilities = capabilities;
                                monad = (0, _monad2.default)(sessionId, params, modifier);
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context.prev = 14;
                                _iterator = (0, _getIterator3.default)((0, _entries2.default)(_webdriver2.default));

                            case 16:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context.next = 43;
                                    break;
                                }

                                _ref3 = _step.value;
                                _ref4 = (0, _slicedToArray3.default)(_ref3, 2);
                                endpoint = _ref4[0];
                                methods = _ref4[1];
                                _iteratorNormalCompletion2 = true;
                                _didIteratorError2 = false;
                                _iteratorError2 = undefined;
                                _context.prev = 24;

                                for (_iterator2 = (0, _getIterator3.default)((0, _entries2.default)(methods)); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                    _ref5 = _step2.value;
                                    _ref6 = (0, _slicedToArray3.default)(_ref5, 2);
                                    method = _ref6[0];
                                    commandData = _ref6[1];

                                    monad.lift(commandData.command, (0, _command2.default)(method, endpoint, commandData));
                                }
                                _context.next = 32;
                                break;

                            case 28:
                                _context.prev = 28;
                                _context.t0 = _context['catch'](24);
                                _didIteratorError2 = true;
                                _iteratorError2 = _context.t0;

                            case 32:
                                _context.prev = 32;
                                _context.prev = 33;

                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }

                            case 35:
                                _context.prev = 35;

                                if (!_didIteratorError2) {
                                    _context.next = 38;
                                    break;
                                }

                                throw _iteratorError2;

                            case 38:
                                return _context.finish(35);

                            case 39:
                                return _context.finish(32);

                            case 40:
                                _iteratorNormalCompletion = true;
                                _context.next = 16;
                                break;

                            case 43:
                                _context.next = 49;
                                break;

                            case 45:
                                _context.prev = 45;
                                _context.t1 = _context['catch'](14);
                                _didIteratorError = true;
                                _iteratorError = _context.t1;

                            case 49:
                                _context.prev = 49;
                                _context.prev = 50;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 52:
                                _context.prev = 52;

                                if (!_didIteratorError) {
                                    _context.next = 55;
                                    break;
                                }

                                throw _iteratorError;

                            case 55:
                                return _context.finish(52);

                            case 56:
                                return _context.finish(49);

                            case 57:
                                prototype = monad();
                                return _context.abrupt('return', prototype);

                            case 59:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[14, 45, 49, 57], [24, 28, 32, 40], [33,, 35, 39], [50,, 52, 56]]);
            }));

            function newSession() {
                return _ref.apply(this, arguments);
            }

            return newSession;
        }()
    }]);
    return WebDriver;
}();

exports.default = WebDriver;
module.exports = exports['default'];