'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.default = validateConfig;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validateConfig(defaults, options) {
    var params = {};

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (0, _getIterator3.default)((0, _entries2.default)(defaults)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _ref = _step.value;

            var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

            var name = _ref2[0];
            var expectedOption = _ref2[1];

            /**
             * check if options is given
             */
            if (typeof options[name] === 'undefined' && !expectedOption.default && expectedOption.required) {
                throw new Error(`Required option "${name}" is missing`);
            }

            if (typeof options[name] === 'undefined' && expectedOption.default) {
                params[name] = expectedOption.default;
            }

            var isValidType = typeof expectedOption.type === 'string' ? typeof options[name] === expectedOption.type && (!expectedOption.match || options[name].match(expectedOption.match)) : expectedOption.type(options[name]);
            if (typeof options[name] !== 'undefined' && isValidType) {
                params[name] = options[name];
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return params;
}
module.exports = exports['default'];