'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.default = getLogger;

var _loglevel = require('loglevel');

var _loglevel2 = _interopRequireDefault(_loglevel);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _loglevelPluginPrefix = require('loglevel-plugin-prefix');

var _loglevelPluginPrefix2 = _interopRequireDefault(_loglevelPluginPrefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_LEVEL = 5; // silent
var COLORS = {
    error: 'red',
    warn: 'yellow',
    info: 'cyanBright',
    debug: 'green',
    trace: 'cyan'
};

var SERIALIZERS = [{
    /**
     * display error stack
     */
    matches: function matches(err) {
        return err instanceof Error;
    },
    serialize: function serialize(err) {
        return err.stack;
    }
}, {
    /**
     * color commands blue
     */
    matches: function matches(log) {
        return log === 'COMMAND';
    },
    serialize: function serialize(log) {
        return _chalk2.default.magenta(log);
    }
}, {
    /**
     * color data yellow
     */
    matches: function matches(log) {
        return log === 'DATA';
    },
    serialize: function serialize(log) {
        return _chalk2.default.yellow(log);
    }
}, {
    /**
     * color result cyan
     */
    matches: function matches(log) {
        return log === 'RESULT';
    },
    serialize: function serialize(log) {
        return _chalk2.default.cyan(log);
    }
}];

_loglevelPluginPrefix2.default.apply(_loglevel2.default, {
    template: '%t %l %n:',
    timestampFormatter: function timestampFormatter(date) {
        return _chalk2.default.gray(date.toISOString());
    },
    levelFormatter: function levelFormatter(level) {
        return _chalk2.default[COLORS[level]](level.toUpperCase());
    },
    nameFormatter: function nameFormatter(name) {
        return _chalk2.default.whiteBright(name || 'global');
    }
});

var loggers = {};

function getLogger(name) {
    /**
     * check if logger was already initiated
     */
    if (loggers[name]) {
        return loggers[name];
    }

    var originalFactory = _loglevel2.default.methodFactory;
    _loglevel2.default.methodFactory = function (methodName, logLevel, loggerName) {
        var rawMethod = originalFactory(methodName, logLevel, loggerName);
        return function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            args = args.map(function (arg) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = (0, _getIterator3.default)(SERIALIZERS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var s = _step.value;

                        if (s.matches(arg)) {
                            return s.serialize(arg);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                return arg;
            });
            rawMethod.apply(undefined, (0, _toConsumableArray3.default)(args));
        };
    };

    loggers[name] = _loglevel2.default.getLogger(name);
    loggers[name].setLevel(DEFAULT_LEVEL);
    return loggers[name];
}

getLogger.setLevel = function (name, level) {
    loggers[name].setLevel(level);
};
module.exports = exports['default'];